<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dongjian&#39;s blog</title>
    <link>http://dongjian.github.io/</link>
    <description>Recent content on dongjian&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>381423609@qq.com (dongjian)</managingEditor>
    <webMaster>381423609@qq.com (dongjian)</webMaster>
    <lastBuildDate>Tue, 15 Aug 2017 20:10:09 +0800</lastBuildDate>
    <atom:link href="http://dongjian.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>燕洵家书,谍纸天眼与数据加密</title>
      <link>http://dongjian.github.io/post/jiami/</link>
      <pubDate>Tue, 15 Aug 2017 20:10:09 +0800</pubDate>
      <author>381423609@qq.com (dongjian)</author>
      <guid>http://dongjian.github.io/post/jiami/</guid>
      <description>

&lt;h2 id=&#34;对称加密:39b4bb88524406a59136c759ec09f0f1&#34;&gt;对称加密&lt;/h2&gt;

&lt;p&gt;信息通讯中,为了保证数据不被第三方窃取,加密 必不可少.战争年代谍报中运用最多.在非对称加密出现之前大部分数据都是通过对称加密来时间的
例如,将26个字母约定好变一个顺序.比如讲 e 和 o 替换
那&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I have a dog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;经加密后就变为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I havo a deg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解密的时候再把 o 和 e 替换回来&lt;/p&gt;

&lt;p&gt;那替换的规则就是用来解密和加密的 key.
这种 解密加密 用的是同一把key 就是对称加密.
再举几个对称加密的例子
比如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-&amp;gt;地振高冈一派西山千古秀
&amp;lt;-门朝大海三河合水万年流
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;-&amp;gt;天王盖地虎
&amp;lt;-宝塔镇河妖
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;提前约定好的暗号.也是对称加密.加密规则双方都知道.别人不知道 来达到加密的效果&lt;/p&gt;

&lt;h2 id=&#34;对称加密的缺点:39b4bb88524406a59136c759ec09f0f1&#34;&gt;对称加密的缺点&lt;/h2&gt;

&lt;p&gt;对称加密的最大缺点就是:&lt;/p&gt;

&lt;h3 id=&#34;1-加密规则很容易泄露-因为传递加密的key的时候是没有加密的:39b4bb88524406a59136c759ec09f0f1&#34;&gt;&lt;code&gt;1&lt;/code&gt;.加密规则很容易泄露.因为传递加密的key的时候是没有加密的&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;暗号在口口传播过程中泄露很正常.鹿鼎记后期 康熙都知道喊 地振高冈.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;2-经过大量数据推算-很有可能把key推算出来:39b4bb88524406a59136c759ec09f0f1&#34;&gt;&lt;code&gt;2&lt;/code&gt;.经过大量数据推算,很有可能把key推算出来&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;前面 字母替换的 加密方式 . 在战争时期真的有用过的(忘记哪个老师讲过的),最后被专门搞密码的人破解掉了.破解方式也很简单.他们通过计算每个字母在文章中出现的频率.基本就得出了key. 比如e在单词中出现的次数是最多的.那密文中出现次数最多的字母不出意外就是 e 或者 空格之类.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;燕洵全家是被对称加密害死的:39b4bb88524406a59136c759ec09f0f1&#34;&gt;燕洵全家是被对称加密害死的&lt;/h2&gt;

&lt;p&gt;燕洵回家书的时候加密方式是&lt;code&gt;笔迹&lt;/code&gt;.中间被大梁谍者调换一次.宇文玥又调换一次.最后到了燕世城那里 , 东方说 那都是假的 , 看我这里的 .
燕世城看了 东方 那里的家书 认为是真的 . 因为&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;①&lt;code&gt;笔迹&lt;/code&gt;对的上&lt;/p&gt;

&lt;p&gt;②有燕洵和燕世城订好的&lt;code&gt;暗号&lt;/code&gt;出现 (如果说到派医生到燕北给燕世城看病,就是燕洵离死不远了).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;燕世城信了假家书 . 直接进京城找皇上 . 然后全家被杀 .&lt;/p&gt;

&lt;p&gt;这就是对称加密的弊端&lt;code&gt;1&lt;/code&gt; &lt;code&gt;2&lt;/code&gt;. 笔迹可以模仿 . 暗号也很容易被偷听&lt;/p&gt;

&lt;h2 id=&#34;谍纸天眼传递消息是如何加密的:39b4bb88524406a59136c759ec09f0f1&#34;&gt;谍纸天眼传递消息是如何加密的&lt;/h2&gt;

&lt;p&gt;叠纸天眼里面有一栋楼那么多的秘密.从来没有泄露.那他是如何做到的呢&lt;/p&gt;

&lt;h3 id=&#34;叠纸天眼使用的是-非对称加密:39b4bb88524406a59136c759ec09f0f1&#34;&gt;叠纸天眼使用的是&lt;code&gt;非对称加密&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;宇文玥有两个东西&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;化影粉&lt;/code&gt;(类似公钥)把&lt;code&gt;化影粉&lt;/code&gt;涂在文字上面,文字就没了&lt;/p&gt;

&lt;p&gt;&lt;code&gt;显影水&lt;/code&gt;(类似私钥)把&lt;code&gt;显影水&lt;/code&gt;涂在被&lt;code&gt;化影粉&lt;/code&gt;涂过的文字上面,文字又会重新出现&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;这种加密与对称加密不同的是-加密解密不是用的同一种东西:39b4bb88524406a59136c759ec09f0f1&#34;&gt;这种加密与对称加密不同的是,加密解密不是用的同一种东西&lt;/h3&gt;

&lt;p&gt;宇文玥 把&lt;code&gt;化影粉&lt;/code&gt; 发给谍者.人手一份随便用,给别人 也 不要紧.但是&lt;/p&gt;

&lt;h3 id=&#34;显影水-只有他自己有-谁都不给:39b4bb88524406a59136c759ec09f0f1&#34;&gt;&lt;code&gt;显影水&lt;/code&gt;只有他自己有,谁都不给&lt;/h3&gt;

&lt;p&gt;那这样.只要被&lt;code&gt;化影粉&lt;/code&gt;加过密的文字,只有宇文玥自己能解密.这就是&lt;code&gt;非对称加密&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;燕洵家书如何能保证一定出自燕洵之手:39b4bb88524406a59136c759ec09f0f1&#34;&gt;燕洵家书如何能保证一定出自燕洵之手&lt;/h2&gt;

&lt;h3 id=&#34;用叠纸天眼的加密方案是否可以:39b4bb88524406a59136c759ec09f0f1&#34;&gt;用叠纸天眼的加密方案是否可以?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;不行. 因为&lt;code&gt;化影粉&lt;/code&gt;江湖上到处都是,就算&lt;code&gt;显影水&lt;/code&gt;只有燕世城有,东方还是可以仿照笔迹加上暗号. 一样可以害死燕洵全家&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;比较好的方式&lt;/p&gt;

&lt;p&gt;燕北研制一种新的&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;新化影粉2&lt;/code&gt;(私钥)功能与&lt;code&gt;化影粉&lt;/code&gt;相同&lt;/p&gt;

&lt;p&gt;&lt;code&gt;新显影水2&lt;/code&gt;(公钥)针对&lt;code&gt;新化影粉2&lt;/code&gt;显形&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;新化影粉2-只有燕洵有-不外传-仅此一瓶-新显影水2-不要紧-燕北的谍者可以人手一份:39b4bb88524406a59136c759ec09f0f1&#34;&gt;&lt;code&gt;新化影粉2&lt;/code&gt;只有燕洵有,不外传,仅此一瓶,&lt;code&gt;新显影水2&lt;/code&gt;不要紧,燕北的谍者可以人手一份.&lt;/h3&gt;

&lt;p&gt;这样以后燕洵写家书约定好用&lt;code&gt;新化影粉2&lt;/code&gt;在家书右下角抹去自己的名字 . 燕世城再收到家书 .&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1.如果右下角有燕洵的名字.那肯定是假的.约定好没名字的.&lt;/p&gt;

&lt;p&gt;2.如果没名字,用&lt;code&gt;新显影水2&lt;/code&gt;涂一下右下角,如果没有名字出现也是假的&lt;/p&gt;

&lt;p&gt;3.只有用&lt;code&gt;新显影水2&lt;/code&gt; 涂右下角出现 燕洵名字的才是真家书&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;原理与现在的数字签名相同&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何快速搭建个人博客hugo &#43; github pages</title>
      <link>http://dongjian.github.io/post/howtobuildablog/</link>
      <pubDate>Thu, 24 Mar 2016 20:02:12 +0800</pubDate>
      <author>381423609@qq.com (dongjian)</author>
      <guid>http://dongjian.github.io/post/howtobuildablog/</guid>
      <description>

&lt;h2 id=&#34;为什么搭建自己的blog:f908b47f078c0fbac5a1c0241a7003e7&#34;&gt;为什么搭建自己的blog&lt;/h2&gt;

&lt;p&gt;1.不论是新浪还是qq空间我都买不起会员,没面子&lt;/p&gt;

&lt;p&gt;2.没广告,能自定义,而且一下子就有了一种我能修电脑的高贵气质&lt;/p&gt;

&lt;h2 id=&#34;hugo:f908b47f078c0fbac5a1c0241a7003e7&#34;&gt;hugo&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io&#34;&gt;https://gohugo.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;hugo是go语言写的,其实用起来跟golang没一点关系,只用到编译好的程序.
它是个生态静态页面的工具.能把md文件渲染成网页.还自带了http sever,有 watch 功能.生成速度很快,watch反映也很快.&lt;/p&gt;

&lt;p&gt;hugo生成静态网站的好处明显,不用数据库,也不需要你写逻辑,啥玩意儿你也不用管,写文章就完了,写完了就用工具调一条命令,啪!,网站好了.&lt;/p&gt;

&lt;h2 id=&#34;github-pages:f908b47f078c0fbac5a1c0241a7003e7&#34;&gt;github pages&lt;/h2&gt;

&lt;p&gt;免费,无限流量,国内外都能上,速度还快.
怕就怕哪天有司机用github pages 飙车,一下被墙了就不好使了
在此呼吁大家遵守交通规则,文明驾驶.&lt;/p&gt;

&lt;h2 id=&#34;如何使用:f908b47f078c0fbac5a1c0241a7003e7&#34;&gt;如何使用&lt;/h2&gt;

&lt;h3 id=&#34;安装hugo:f908b47f078c0fbac5a1c0241a7003e7&#34;&gt;安装hugo&lt;/h3&gt;

&lt;p&gt;mac 用户&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew update &amp;amp;&amp;amp; brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我系统10.10的,安装的时候brew坏了,卸了从新安装的&lt;/p&gt;

&lt;p&gt;brew安装&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;brew 卸载&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;windows 用户&lt;/p&gt;

&lt;p&gt;去官网下载hugo.exe使用就行了&lt;/p&gt;

&lt;h3 id=&#34;新建项目:f908b47f078c0fbac5a1c0241a7003e7&#34;&gt;新建项目&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;hugo new site /建站文件夹
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;建完以后文件夹结构如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tree -a
.
|-- archetypes
|-- config.toml
|-- content
|-- data
|-- layouts
`-- static
5 directories, 1 file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tree 是个挺好的工具 安装方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install tree
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;写文章:f908b47f078c0fbac5a1c0241a7003e7&#34;&gt;写文章&lt;/h3&gt;

&lt;p&gt;hugo新建文章&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/hello.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在./content/post 里面会多一个文件,内容这样的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-03-25T00:33:03+08:00&amp;quot;
description = &amp;quot;&amp;quot;
title = &amp;quot;hello&amp;quot;
draft = true
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;draft表示是草稿,不会渲染.把这一行删掉就好了&lt;/p&gt;

&lt;h3 id=&#34;选主题:f908b47f078c0fbac5a1c0241a7003e7&#34;&gt;选主题&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;https://themes.gohugo.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里有各种各样的皮肤可以选,我选了比较简洁的hugo_theme_beg&lt;/p&gt;

&lt;p&gt;安装方法
在项目里面建一个themes的目录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir themes &amp;amp;&amp;amp; cd themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后把你喜欢的主题clone下来&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:dim0627/hugo_theme_beg.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;用hugo跑服务看下效果:f908b47f078c0fbac5a1c0241a7003e7&#34;&gt;用hugo跑服务看下效果&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;hugo server -w --theme=hugo_theme_beg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打开浏览器访问 &lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;就能看到效果了.&lt;/p&gt;

&lt;h3 id=&#34;上传至github-pages:f908b47f078c0fbac5a1c0241a7003e7&#34;&gt;上传至github pages&lt;/h3&gt;

&lt;p&gt;运行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo --theme=hugo_theme_beg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hugo会自动把渲染好的静态页面放在public下面&lt;/p&gt;

&lt;p&gt;在github上建一个项目,命名方式: 用户名.github.io
然后把public里面的内容push去就可以了
以后每次修改重新运行上面命令,然后再用git同步即可&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;不会用git的朋友,可以下载一个sourceTree,在github上练习下,无非就是pull-&amp;gt;add/remove-&amp;gt;commit-&amp;gt;push&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;项目根目录下的config.toml记得修改baseURL&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseURL=                    &amp;quot;http://用户名.github.io/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;其他:f908b47f078c0fbac5a1c0241a7003e7&#34;&gt;其他&lt;/h3&gt;

&lt;p&gt;disqus 支持
只要在config.toml里面添加&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;disqusShortname = &amp;quot;你的disqus用户名&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就可以了,但是disqus被墙了,国内用不了,我就换成了中国的&lt;code&gt;多说&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;把themes/你选的主题/layouts/_default/single.html 里面disqus的换成下面的就行了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 多说评论框 start --&amp;gt;
&amp;lt;div class=&amp;quot;ds-thread&amp;quot; data-thread-key=&amp;quot;{{ .URL }}&amp;quot; data-title=&amp;quot;{{ .Title }}&amp;quot; data-url=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;!-- 多说评论框 end --&amp;gt;

&amp;lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    var duoshuoQuery = {short_name:&amp;quot;{{.Site.Params.duoshuoShortname}}&amp;quot;};

    (function() {
     var ds = document.createElement(&#39;script&#39;);
     ds.type = &#39;text/javascript&#39;;ds.async = true;
     ds.src = (document.location.protocol == &#39;https:&#39; ? &#39;https:&#39; : &#39;http:&#39;) + &#39;//static.duoshuo.com/embed.js&#39;;
     ds.charset = &#39;UTF-8&#39;;
     (document.getElementsByTagName(&#39;head&#39;)[0]
      || document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(ds);
     })();
    &amp;lt;/script&amp;gt;
&amp;lt;!-- 多说公共JS代码 end --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
